{"name":"Formhandler","tagline":"","body":"## INSTALLATION INSTRUCTIONS\r\n\r\nInclude with composer\r\n\r\n```\r\ncomposer require jimlei/formhandler:dev-master\r\n```\r\n\r\nCreate the object/entity that will be modified by the form (request)\r\n\r\n```php\r\n<?php // src/Entity/Article.php\r\n\r\nnamespace Acme\\Entity;\r\n\r\nclass Article\r\n{\r\n    private $id;\r\n    private $title;\r\n\r\n    public function getId()\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    public function setId($id)\r\n    {\r\n        $this->id = $id;\r\n        return $this;\r\n    }\r\n\r\n    public function getTitle()\r\n    {\r\n        return $this->title;\r\n    }\r\n\r\n    public function setTitle($title)\r\n    {\r\n        $this->title = $title;\r\n        return $this;\r\n    }\r\n}\r\n```\r\n\r\nCreate the form that will map/validate the data in the request\r\n\r\n```php\r\n<?php // src/Form/ArticleForm.php\r\n\r\nnamespace Acme\\Form;\r\n\r\nuse Acme\\Entity\\Article;\r\nuse Jimlei\\FormHandler\\Form;\r\n\r\nclass ArticleForm extends Form\r\n{\r\n    public function __construct(Article $article)\r\n    {\r\n        $fields = array(\r\n            'title' => array(\r\n                'type' => 'string',\r\n                'maxLength' => '60',\r\n                'required' => true\r\n            )\r\n        );\r\n\r\n        parent::__construct($article, $fields);\r\n    }\r\n}\r\n```\r\n\r\nIt's depending on the Request->getData method so you should implement the RequestInterface in your handling of request data (method, data, query, etc).\r\n\r\n```php\r\n<?php // src/Net/Request.php\r\n\r\nnamespace Acme\\Net;\r\n\r\nuse Jimlei\\FormHandler\\RequestInterface;\r\n\r\n/**\r\n * Maps a request to usable data.\r\n */\r\nclass Request implements RequestInterface\r\n{\r\n    private $data;\r\n\r\n    public function __construct()\r\n    {\r\n        $this->data = json_decode(file_get_contents('php://input')) ?: array();\r\n    }\r\n    \r\n    public function getData()\r\n    {\r\n        return $this->data;\r\n    }\r\n}\r\n```\r\n\r\nBring it together\r\n\r\n```php\r\n<?php // index.php\r\n\r\nuse Acme\\Entity\\Article;\r\nuse Acme\\Form\\ArticleForm;\r\nuse Acme\\Net\\Request;\r\n\r\nrequire 'vendor/autoload.php';\r\n\r\n$request = new Request();\r\n$article = new Article();\r\n\r\n$form = new ArticleForm($article);\r\n$form->handleRequest($request);\r\n\r\nif ($form->isValid())\r\n{\r\n    // save article...\r\n}\r\n\r\n// do something with the errors\r\nforeach ($form->getErrors() as $error)\r\n{\r\n  // log, add to flash message, display otherwise, etc.\r\n}\r\n```\r\n\r\nYou can do curl requests to test it out. Play around with passing parameters, change the form field types/require/length, etc and see validation and errors change.\r\n\r\n```\r\ncurl --data '{\"title\":\"foo\"}' localhost\r\n```\r\n\r\n#### Available types\r\n* bool\r\n* ~~date~~\r\n* ~~datetime~~\r\n* email\r\n* float\r\n* int\r\n* ip\r\n* string\r\n* ~~time~~\r\n* timestamp\r\n* url\r\n\r\n#### Available validations\r\n\r\n* required (bool)\r\n* min (int)\r\n* max (int)\r\n* minLength (int)\r\n* maxLength (int)\r\n\r\n## Run tests\r\n```\r\n$ vendor/bin/phpunit\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}